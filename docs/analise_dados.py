#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import re

# Configurar matplotlib para usar fonte que suporte caracteres especiais
plt.rcParams['font.family'] = ['DejaVu Sans']

def analisar_dados_imoveis():
    """An√°lise completa dos dados de im√≥veis da Caixa"""
    
    print("üè† AN√ÅLISE DOS DADOS DE IM√ìVEIS DA CAIXA ECON√îMICA FEDERAL")
    print("=" * 60)
    
    # Carregar dados
    try:
        df = pd.read_csv('/home/ubuntu/lista_imoveis_utf8.csv', 
                        sep=';', 
                        skiprows=2,  # Pular cabe√ßalho
                        encoding='utf-8')
        
        # Renomear colunas
        df.columns = ['numero_imovel', 'uf', 'cidade', 'bairro', 'endereco', 
                     'preco', 'valor_avaliacao', 'desconto', 'descricao', 
                     'modalidade_venda', 'link_acesso']
        
        print(f"üìä Total de im√≥veis carregados: {len(df)}")
        print(f"üìä Colunas dispon√≠veis: {list(df.columns)}")
        
        # Limpeza b√°sica de dados
        df = df.dropna(subset=['numero_imovel'])
        df = df[df['numero_imovel'] != '']
        
        # Converter pre√ßos para num√©rico
        df['preco'] = pd.to_numeric(df['preco'].astype(str).str.replace(',', '.'), errors='coerce')
        df['valor_avaliacao'] = pd.to_numeric(df['valor_avaliacao'].astype(str).str.replace(',', '.'), errors='coerce')
        df['desconto'] = pd.to_numeric(df['desconto'].astype(str).str.replace(',', '.'), errors='coerce')
        
        print(f"üìä Im√≥veis v√°lidos ap√≥s limpeza: {len(df)}")
        
        # An√°lise por UF
        print("\nüó∫Ô∏è  DISTRIBUI√á√ÉO POR ESTADO:")
        uf_counts = df['uf'].str.strip().value_counts()
        for uf, count in uf_counts.head(10).items():
            print(f"   {uf}: {count:,} im√≥veis")
        
        # An√°lise de pre√ßos
        print(f"\nüí∞ AN√ÅLISE DE PRE√áOS:")
        print(f"   Pre√ßo m√©dio: R$ {df['preco'].mean():,.2f}")
        print(f"   Pre√ßo mediano: R$ {df['preco'].median():,.2f}")
        print(f"   Menor pre√ßo: R$ {df['preco'].min():,.2f}")
        print(f"   Maior pre√ßo: R$ {df['preco'].max():,.2f}")
        
        # An√°lise de descontos
        print(f"\nüè∑Ô∏è  AN√ÅLISE DE DESCONTOS:")
        print(f"   Desconto m√©dio: {df['desconto'].mean():.2f}%")
        print(f"   Desconto mediano: {df['desconto'].median():.2f}%")
        print(f"   Maior desconto: {df['desconto'].max():.2f}%")
        
        # An√°lise de modalidades de venda
        print(f"\nüî® MODALIDADES DE VENDA:")
        modalidades = df['modalidade_venda'].str.strip().value_counts()
        for modalidade, count in modalidades.items():
            print(f"   {modalidade}: {count:,} im√≥veis")
        
        # An√°lise de tipos de im√≥veis (extrair da descri√ß√£o)
        print(f"\nüèòÔ∏è  TIPOS DE IM√ìVEIS:")
        tipos_imoveis = []
        for desc in df['descricao'].fillna(''):
            if 'Casa' in desc:
                tipos_imoveis.append('Casa')
            elif 'Apartamento' in desc:
                tipos_imoveis.append('Apartamento')
            elif 'Terreno' in desc:
                tipos_imoveis.append('Terreno')
            elif 'Galp√£o' in desc:
                tipos_imoveis.append('Galp√£o')
            elif 'Gleba' in desc:
                tipos_imoveis.append('Gleba')
            else:
                tipos_imoveis.append('Outros')
        
        tipo_counts = Counter(tipos_imoveis)
        for tipo, count in tipo_counts.items():
            print(f"   {tipo}: {count:,} im√≥veis")
        
        # An√°lise de cidades com mais im√≥veis
        print(f"\nüèôÔ∏è  CIDADES COM MAIS IM√ìVEIS:")
        cidades = df['cidade'].str.strip().value_counts()
        for cidade, count in cidades.head(10).items():
            print(f"   {cidade}: {count:,} im√≥veis")
        
        # An√°lise de padr√µes na descri√ß√£o
        print(f"\nüìù AN√ÅLISE DE DESCRI√á√ïES:")
        descricoes_vazias = df['descricao'].isna().sum() + (df['descricao'] == '.').sum()
        print(f"   Descri√ß√µes vazias ou apenas '.': {descricoes_vazias:,}")
        print(f"   Percentual de descri√ß√µes problem√°ticas: {(descricoes_vazias/len(df)*100):.1f}%")
        
        # Extrair informa√ß√µes estruturadas das descri√ß√µes
        print(f"\nüîç EXTRA√á√ÉO DE DADOS ESTRUTURADOS:")
        quartos_pattern = r'(\d+)\s+qto\(s\)'
        vagas_pattern = r'(\d+)\s+vaga\(s\)'
        area_total_pattern = r'(\d+\.?\d*)\s+de √°rea total'
        area_privativa_pattern = r'(\d+\.?\d*)\s+de √°rea privativa'
        area_terreno_pattern = r'(\d+\.?\d*)\s+de √°rea do terreno'
        
        quartos_extraidos = 0
        vagas_extraidas = 0
        areas_extraidas = 0
        
        for desc in df['descricao'].fillna(''):
            if re.search(quartos_pattern, desc):
                quartos_extraidos += 1
            if re.search(vagas_pattern, desc):
                vagas_extraidas += 1
            if re.search(area_total_pattern, desc):
                areas_extraidas += 1
        
        print(f"   Im√≥veis com info de quartos: {quartos_extraidos:,}")
        print(f"   Im√≥veis com info de vagas: {vagas_extraidas:,}")
        print(f"   Im√≥veis com info de √°rea: {areas_extraidas:,}")
        
        # Salvar amostra para an√°lise
        amostra = df.head(100)
        amostra.to_csv('/home/ubuntu/amostra_imoveis.csv', index=False, encoding='utf-8')
        
        print(f"\n‚úÖ An√°lise conclu√≠da! Amostra salva em: /home/ubuntu/amostra_imoveis.csv")
        
        return df
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")
        return None

if __name__ == "__main__":
    df = analisar_dados_imoveis()

